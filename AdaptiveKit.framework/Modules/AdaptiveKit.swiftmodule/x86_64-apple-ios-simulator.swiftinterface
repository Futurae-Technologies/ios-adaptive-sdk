// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdaptiveKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AdaptiveKit
import SystemConfiguration.CaptiveNetwork
import CoreBluetooth
import CoreLocation
import Foundation
import Network
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class AdaptiveSDK : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  public init(bonjourServices: [Swift.String]?, bluetoothManagerFactory: @escaping () -> any AdaptiveKit.BluetoothCentralManager, locationManagerFactory: @escaping () -> any AdaptiveKit.LocationManager, netServiceBrowserFactory: @escaping () -> Foundation.NetServiceBrowser, timerFactory: @escaping (Foundation.TimeInterval, Swift.Bool, @escaping (Foundation.Timer) -> Swift.Void) -> Foundation.Timer, notificationCenter: Foundation.NotificationCenter, application: any AdaptiveKit.Application)
  @objc weak public var delegate: (any AdaptiveKit.AdaptiveSDKDelegate)?
  @objc public func startScanning()
  @objc public func startScanningOnce()
  @objc public func completeScanning()
  @objc public func stopScanning()
  @objc public func automaticModeForNotificationAndBackgroundTask()
  @objc public func setAdaptiveTimeThreshold(_ threshold: Swift.Int) throws
  @objc deinit
}
@objc public protocol AdaptiveSDKDelegate {
  @objc func didReceiveUpdate(collectedData: [Swift.String : Any])
  @objc func bluetoothSettingStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func bluetoothPermissionStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func locationSettingStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func locationPermissionStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func locationPrecisePermissionStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func networkSettingStatus() -> AdaptiveKit.AdaptivePermissionStatus
  @objc func networkPermissionStatus() -> AdaptiveKit.AdaptivePermissionStatus
}
@objc public protocol LocationManager {
  @objc var delegate: (any CoreLocation.CLLocationManagerDelegate)? { get set }
  @objc func requestWhenInUseAuthorization()
  @objc func startUpdatingLocation()
  @objc func stopUpdatingLocation()
}
@objc public enum AdaptivePermissionStatus : Swift.Int {
  case unknown = 0
  case on = 1
  case off = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIApplication : AdaptiveKit.Application {
}
@objc public protocol BluetoothCentralManager {
  @objc var delegate: (any CoreBluetooth.CBCentralManagerDelegate)? { get set }
  @objc func scanForPeripherals(withServices serviceUUIDs: [CoreBluetooth.CBUUID]?, options: [Swift.String : Any]?)
  @objc func stopScan()
}
@objc public protocol Application {
  @objc func beginBackgroundTask(withName taskName: Swift.String?, expirationHandler handler: (() -> Swift.Void)?) -> UIKit.UIBackgroundTaskIdentifier
  @objc func endBackgroundTask(_ identifier: UIKit.UIBackgroundTaskIdentifier)
}
extension CoreLocation.CLLocationManager : AdaptiveKit.LocationManager {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AdaptiveStorage : ObjectiveC.NSObject {
  @objc public class func shared() -> AdaptiveKit.AdaptiveStorage
  @objc public func save(_ collection: [Swift.String : Any])
  @objc public func delete(_ collection: [Swift.String : Any])
  @objc public func savedCollections() -> [[Swift.String : Any]]
  @objc deinit
}
extension CoreBluetooth.CBCentralManager : AdaptiveKit.BluetoothCentralManager {
}
extension AdaptiveKit.AdaptivePermissionStatus : Swift.Equatable {}
extension AdaptiveKit.AdaptivePermissionStatus : Swift.Hashable {}
extension AdaptiveKit.AdaptivePermissionStatus : Swift.RawRepresentable {}
